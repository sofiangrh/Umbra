#########################################
#	      Umbra Theme		#
#	  Author: Sean Rigney		#
#	Email: smlymn707@live.com	#
#########################################

gtk-icon-sizes = "panel-menu=20,20"

## Just place a "#" in front of any of these you do not want. ##


#include "iconrc" not ready yet (not a priority either you may add if you want.)

include "panel.rc" 

include "menu.rc"

include "menubar.rc"

include "toolbar.rc"

include "optionmenu.rc"

include "scrollbar.rc"

include "notebook.rc"

include "check-radio.rc"

include "buttons.rc

style "umbra-default"
{
	GtkButton      ::default_border    = { 0, 0, 0, 0 }
	GtkRange       ::trough_border     = 0
	GtkPaned       ::handle_size       = 6
	GtkRange       ::slider_width      = 15
	GtkRange       ::stepper_size      = 15

	GtkScrollbar   ::min_slider_length = 35
	GtkCheckButton ::indicator_size    = 14
	GtkMenuBar     ::internal-padding  = 0
	GtkTreeView    ::expander_size     = 14
	GtkExpander    ::expander_size     = 16
	GtkScale       ::slider-length     = 31
	# Gtktoolbar   ::button-relief     = GTK_RELIEF_NORMAL
	# GtkMenuBar   ::shadow-type       = GTK_SHADOW_OUT
	# GtkScrollbar ::has-secondary-forward-stepper  = 1
	# GtkScrollbar  ::has-secondary-backward-stepper = 1

	GtkButton      ::child-displacement-x = 0
	GtkButton      ::child-displacement-y = 0

	xthickness = 1
	ythickness = 1

	GtkTreeView::odd_row_color = "#F5F2ED"
	GtkTreeView::even_row_color = "#FAF9F7"

	fg[NORMAL]        = "#000000"
	fg[ACTIVE]        = "#000000"
	fg[PRELIGHT]      = "#000000"
	fg[SELECTED]      = "#FFFFFF"
	fg[INSENSITIVE]   = "#747474"

	bg[NORMAL]        = "#7b7b7b"
	bg[PRELIGHT]      = "#7b7b7b"
	bg[SELECTED]	  = "#7b7b7b"
	bg[INSENSITIVE]   = "#000000"
	bg[ACTIVE]        = "#000000"

	base[NORMAL]      = "#ffffff"
	base[PRELIGHT]    = "#8ac6fa"
	base[ACTIVE]      = "#8ac6fa"
	base[SELECTED]    = "#8ac6fa"
	base[INSENSITIVE] = "#8ac6fa"

	text[NORMAL]      = "#000000"
	text[PRELIGHT]    = "#000000"
	text[ACTIVE]      = "#000000"
	text[SELECTED]    = "#ffffff"
	text[INSENSITIVE] = "#000000"

#  NautilusIconContainer::highlight_alpha=160


    engine "pixmap"
    { 
	#This defines how the focus is drawn. Using a transparent image means there is
	#no line around a widget when it is in focus.
    	image
      	{
        	function        = FOCUS
		recolorable     = TRUE
		overlay_file    = "focus/focus.png"
		overlay_border  = { 9, 9, 10, 10 }
		overlay_stretch = TRUE
      	}

	#The following four entries describe how the different types of shadows
	#are drawn
    	image 
      	{
       		function        = SHADOW
 		recolorable     = TRUE
		shadow          = OUT
		file            = "shadows/etched_out.png"
		border          = { 2, 2, 2, 2 }
		stretch         = TRUE
      	}	

    	image 
      	{
       		function        = SHADOW
 		recolorable     = TRUE
		shadow          = IN
		file            = "shadows/in.png"
		border          = { 2, 2, 2, 2 }
		stretch         = TRUE
      	}	

        image 
      	{
       		function        = SHADOW
 		recolorable     = TRUE
		shadow          = ETCHED_IN
		file            = "shadows/etched_in.png"
		border          = { 2, 2, 2, 2 }
		stretch         = TRUE
      	}	

        image 
      	{
       		function        = SHADOW
 		recolorable     = TRUE
		shadow          = ETCHED_OUT
		file            = "shadows/etched_out.png"
		border          = { 2, 2, 2, 2 }
		stretch         = TRUE
      	}	

	#How to draw horizontal lines
    	image
      	{
        	function        = HLINE
		recolorable     = TRUE
		file            = "lines/hline.png"
		border          = { 1, 1, 1, 0 }
		stretch         = TRUE
      	}	

	#How to draw vertical lines
    	image
      	{
        	function        = VLINE
		recolorable     = TRUE
		file            = "lines/vline.png"
		border          = { 1, 0, 1, 1 }
		stretch         = TRUE
      	}	

	#The following two entries describe how handles (grippers) are drawn.	
	image 
	{
		function	= HANDLE
		orientation	= HORIZONTAL
		recolorable	= TRUE
		#The background image on boxes with horizontal handles. 
		file		= "menu/transparent.png"
		border		= { 1,1,1,1 }
		stretch		= TRUE
		#The overlay on horizontal handles
		overlay_file	= "lines/vertical_handle.png"
		overlay_border	= { 0,0,0,0 }
		overlay_stretch	= FALSE
	}
	
		
	image
	{
	  	function = HANDLE
		recolorable = TRUE
		#The background on vertical handles
		file            = "menu/transparent.png"
		border          = { 1, 1, 1, 1 }
		stretch         = TRUE
		#The overlay on vertical handles. 
		overlay_file = "lines/horizontal_handle.png"
		overlay_border = {0,0,0,0}
		overlay_stretch = FALSE
		orientation = VERTICAL
	}

	#This tells gtk how to draw the base of a handlebox; i.e. the bin that the
	#buttons sit in.
 	image 
      	{
        	function        = BOX
		recolorable     = TRUE
		detail          = "handlebox_bin"
		file            = "menu/plain_background.png"
		border          = { 1,1,1,1 }
		stretch         = TRUE
      	}

 	image
   	 {
      		function			= ARROW
     		 state				= NORMAL
     		 recolorable			= TRUE
     		 overlay_file			= "arrows/down.png"
     		 overlay_border			= { 0, 0, 0, 0 }
     		 overlay_stretch		= FALSE
     		 arrow_direction		= DOWN
    	}

	image
   	 {
      		function			= ARROW
     		 state				= PRELIGHT
     		 recolorable			= TRUE
     		 overlay_file			= "arrows/down_prelight.png"
     		 overlay_border			= { 0, 0, 0, 0 }
     		 overlay_stretch		= FALSE
     		 arrow_direction		= DOWN
    	}

	image
   	 {
      		function			= ARROW
     		 state				= INSENSITIVE
     		 recolorable			= TRUE
     		 overlay_file			= "arrows/down_insensitive.png"
     		 overlay_border			= { 0, 0, 0, 0 }
     		 overlay_stretch		= FALSE
     		 arrow_direction		= DOWN
    	}

	image
   	 {
      		function			= ARROW
     		 state				= ACTIVE
     		 recolorable			= TRUE
     		 overlay_file			= "arrows/down_ins.png"
     		 overlay_border			= { 0, 0, 0, 0 }
     		 overlay_stretch		= FALSE
     		 arrow_direction		= DOWN
    	}

     

	image
   	 {
      		function			= ARROW
     		 state				= NORMAL
     		 recolorable			= TRUE
     		 overlay_file			= "arrows/up.png"
     		 overlay_border			= { 10, 10, 0, 0 }
     		 overlay_stretch		= FALSE
     		 arrow_direction		= UP
    	}

	image
   	 {
      		function			= ARROW
     		 state				= PRELIGHT
     		 recolorable			= TRUE
     		 overlay_file			= "arrows/up_pre.png"
     		 overlay_border			= { 0, 0, 0, 0 }
     		 overlay_stretch		= FALSE
     		 arrow_direction		= UP
    	}

	image
   	 {
      		function			= ARROW
     		 state				= INSENSITIVE
     		 recolorable			= TRUE
     		 overlay_file			= "arrows/up_ins.png"
     		 overlay_border			= { 0, 0, 0, 0 }
     		 overlay_stretch		= FALSE
     		 arrow_direction		= UP
    	}

	image
   	 {
      		function			= ARROW
     		 state				= ACTIVE
     		 recolorable			= TRUE
     		 overlay_file			= "arrows/up_act.png"
     		 overlay_border			= { 0, 0, 0, 0 }
     		 overlay_stretch		= FALSE
     		 arrow_direction		= UP
    	}
	image
 	   {
	      function				= ARROW
	      recolorable			= TRUE
	      overlay_file			= "arrows/left.png"
	      overlay_border	= { 0, 0, 0, 0 }
	      overlay_stretch	= FALSE
	      arrow_direction	= LEFT
	    }
	image
	    {
	      function				= ARROW
	      recolorable			= TRUE
	      overlay_file			= "arrows/right.png"
	      overlay_border	= { 0, 0, 0, 0 }
	      overlay_stretch	= FALSE
	      arrow_direction	= RIGHT
	    }

     }

}


style "umbra-tasklist"
{
	xthickness = 5
	ythickness = 3
}

style "umbra-tooltips"
{
	xthickness = 4
	ythickness = 4
	bg[NORMAL] = @tooltip_bg_color
	fg[NORMAL] = @tooltip_fg_color
engine "clearlooks"
{
}
}

style "umbra-progressbar" 
{
	xthickness    = 2
	ythickness    = 2
	fg[PRELIGHT]  = @base_color

engine "pixmap"
{
	image
	{
      function			= BOX

      detail			= "trough"
      file				= "progressbar/trough-horiz.png"
      border			= { 2, 2, 2, 2 }
      stretch			= TRUE
      orientation		= HORIZONTAL
    }

    image
    {
      function			= BOX

      detail			= "bar"
      file				= "progressbar/bar-horiz.png"
      border			= { 2, 2, 2, 2 }
      stretch			= TRUE
      orientation		= HORIZONTAL
    } 

    image
    {
      function			= BOX

      detail			= "trough"
      file				= "progressbar/trough--vert.png"
      border			= { 2, 2, 2, 2 }
      stretch			= TRUE
      orientation		= VERTICAL
    }

    image
    {
      function			= BOX

      detail			= "bar"
      file				= "progressbar/bar-vert.png"
      border			= { 2, 2, 2, 2 }
      stretch			= TRUE
      orientation		= VERTICAL
    } 

  }
}

style "umbra-range" = "umbra-wide-orange"
{
engine "clearlooks"
{
style = GLOSSY
}
}

style "extra-view-widgets"
{
	bg[NORMAL] = @extra_view_widgets_color
engine "ubuntulooks"
{
}
}

style "umbra-scale"
{
engine "clearlooks"
{
style = GLOSSY
}
}

style "umbra-entry"
{
  engine "pixmap"
  {
    image
    {
      function			= FOCUS
      recolorable		= TRUE
      file			= "shadows/txt_in.png"
      border			= { 2,2,2,2 }
      stretch			= TRUE
    }	
 image
    {
      function			= BOX
      recolorable		= TRUE
	 shadow			= IN
      state			= NORMAL
      file			= "shadows/txt_in.png"
      border			= { 2,2,2,2 }
      stretch			= TRUE
    }	
    image
    {
      function			= BOX
      recolorable		= TRUE
	 shadow			= OUT
      state			= NORMAL
      file			= "shadows/text-entry.png"
      border			= { 5,5,5,5 }
      stretch			= TRUE
    }	
    image
    {
      function			= BOX
      recolorable		= TRUE
	 shadow			= OUT
      state			= PRELIGHT
      file			= "shadows/text-entry.png"
      border			= { 5,5,5,5 }
      stretch			= TRUE
    }
  image
   {
     function			= SHADOW
     detail			= "entry"
     shadow			= IN
     recolorable		= FALSE
     file			= "shadows/text-entry.png"
     border			= { 5,5,5,5 }
     stretch			= TRUE
    }
	image
	{
		function	= ARROW
	}

	image
	{
		function	= BOX
		state		= NORMAL
		detail		= "spinbutton_up"
		recolorable	= TRUE
		file		= "spin/spin-up.png"
		border		= { 3 , 3 , 3 , 3 }
		stretch		= TRUE
		overlay_file	= "spin/arrow-up.png"
		overlay_stretch	= FALSE
		overlay_border	= { 0 , 0 , 0 , 0 }
	}

	image
	{
		function	= BOX
		state		= PRELIGHT
		detail		= "spinbutton_up"
		recolorable	= TRUE
		file		= "spin/spin-up.png"
		border		= { 3 , 3 , 3 , 3 }
		stretch		= TRUE
		overlay_file	= "spin/arrow-up-prelight.png"
		overlay_stretch	= FALSE
		overlay_border	= { 0 , 0 , 0 , 0 }
	}

	image
	{
		function	= BOX
		state		= ACTIVE
		detail		= "spinbutton_up"
		recolorable	= TRUE
		file		= "spin/spin-up.png"
		border		= { 3 , 3 , 3 , 3 }
		stretch		= TRUE
		overlay_file	= "spin/arrow-up-prelight.png"
		overlay_stretch	= FALSE
		overlay_border	= { 0 , 0 , 0 , 0 }
	}

	image
	{
		function	= BOX
		state		= INSENSITIVE
		detail		= "spinbutton_up"
		recolorable	= TRUE
		file		= "spin/spin-up.png"
		border		= { 3 , 3 , 3 , 3 }
		stretch		= TRUE
		overlay_file	= "spin/arrow-up-insensitive.png"
		overlay_stretch	= FALSE
		overlay_border	= { 0 , 0 , 0 , 0 }
	}



	image
	{
		function	= BOX
		state		= NORMAL
		detail		= "spinbutton_down"
		recolorable	= TRUE
		file		= "spin/spin-down.png"
		border		= { 5 , 5 , 5 , 5}
		stretch		= TRUE
		overlay_file	= "spin/arrow-down.png"
		overlay_stretch	= FALSE
		overlay_border	= { 0 , 0 , 0 , 0 }
	}

	image
	{
		function	= BOX
		state		= PRELIGHT
		detail		= "spinbutton_down"
		recolorable	= TRUE
		file		= "spin/spin-down.png"
		border		= { 5 , 5 , 5 , 5}
		stretch		= TRUE
		overlay_file	= "spin/arrow-down-prelight.png"
		overlay_stretch	= FALSE
		overlay_border	= { 0 , 0 , 0 , 0 }
	}

	image
	{
		function	= BOX
		state		= ACTIVE
		detail		= "spinbutton_down"
		recolorable	= TRUE
		file		= "spin/spin-down.png"
		border		= { 0 , 0 , 0 , 0 }
		stretch		= TRUE
		overlay_file	= "spin/arrow-down-prelight.png"
		overlay_stretch	= FALSE
		overlay_border	= { 0 , 0 , 0 , 0 }
	}

	image
	{
		function	= BOX
		state		= INSENSITIVE
		detail		= "spinbutton_down"
		recolorable	= TRUE
		file		= "spin/spin-down.png"
		border		= { 0 , 0 , 0 , 0 }
		stretch		= TRUE
		overlay_file	= "spin/arrow-down-insensitive.png"
		overlay_stretch	= FALSE
		overlay_border	= { 0 , 0 , 0 , 0 }
	}
  }
}

class "GtkEntry"	style "umbra-entry"

style "umbra-spin"
{

engine "pixmap"
{
	image
	{
		function	= ARROW
	}

	image
	{
		function	= BOX
		state		= NORMAL
		detail		= "spinbutton_up"
		recolorable	= TRUE
		file		= "spin/spin-up.png"
		border		= { 3 , 3 , 3 , 3 }
		stretch		= TRUE
		overlay_file	= "spin/arrow-up.png"
		overlay_stretch	= FALSE
		overlay_border	= { 0 , 0 , 0 , 0 }
	}

	image
	{
		function	= BOX
		state		= PRELIGHT
		detail		= "spinbutton_up"
		recolorable	= TRUE
		file		= "spin/spin-up.png"
		border		= { 3 , 3 , 3 , 3 }
		stretch		= TRUE
		overlay_file	= "spin/arrow-up-prelight.png"
		overlay_stretch	= FALSE
		overlay_border	= { 0 , 0 , 0 , 0 }
	}

	image
	{
		function	= BOX
		state		= ACTIVE
		detail		= "spinbutton_up"
		recolorable	= TRUE
		file		= "spin/spin-up.png"
		border		= { 3 , 3 , 3 , 3 }
		stretch		= TRUE
		overlay_file	= "spin/arrow-up-prelight.png"
		overlay_stretch	= FALSE
		overlay_border	= { 0 , 0 , 0 , 0 }
	}

	image
	{
		function	= BOX
		state		= INSENSITIVE
		detail		= "spinbutton_up"
		recolorable	= TRUE
		file		= "spin/spin-up.png"
		border		= { 3 , 3 , 3 , 3 }
		stretch		= TRUE
		overlay_file	= "spin/arrow-up-insensitive.png"
		overlay_stretch	= FALSE
		overlay_border	= { 0 , 0 , 0 , 0 }
	}



	image
	{
		function	= BOX
		state		= NORMAL
		detail		= "spinbutton_down"
		recolorable	= TRUE
		file		= "spin/spin-down.png"
		border		= { 5 , 5 , 5 , 5}
		stretch		= TRUE
		overlay_file	= "spin/arrow-down.png"
		overlay_stretch	= FALSE
		overlay_border	= { 0 , 0 , 0 , 0 }
	}

	image
	{
		function	= BOX
		state		= PRELIGHT
		detail		= "spinbutton_down"
		recolorable	= TRUE
		file		= "spin/spin-down.png"
		border		= { 5 , 5 , 5 , 5}
		stretch		= TRUE
		overlay_file	= "spin/arrow-down-prelight.png"
		overlay_stretch	= FALSE
		overlay_border	= { 0 , 0 , 0 , 0 }
	}

	image
	{
		function	= BOX
		state		= ACTIVE
		detail		= "spinbutton_down"
		recolorable	= TRUE
		file		= "spin/spin-down.png"
		border		= { 0 , 0 , 0 , 0 }
		stretch		= TRUE
		overlay_file	= "spin/arrow-down-prelight.png"
		overlay_stretch	= FALSE
		overlay_border	= { 0 , 0 , 0 , 0 }
	}

	image
	{
		function	= BOX
		state		= INSENSITIVE
		detail		= "spinbutton_down"
		recolorable	= TRUE
		file		= "spin/spin-down.png"
		border		= { 0 , 0 , 0 , 0 }
		stretch		= TRUE
		overlay_file	= "spin/arrow-down-insensitive.png"
		overlay_stretch	= FALSE
		overlay_border	= { 0 , 0 , 0 , 0 }
	}
    }
}

widget_class "*SpinButton*"	style "umbra-spin"

style "paned"
{

  #xthickness = 5
  #ythickness = 5

  #This defines the thickness of the bar that divides the window.
  GtkPaned::handle_size = 6

  engine "pixmap"
  {
        # The handle on horizontal dividers
	image
	{
	  	function = HANDLE
		recolorable = TRUE
		file            = "menu/plain_background.png"
		border          = { 0, 0, 0, 0 }
		stretch         = TRUE
		overlay_file = "lines/horizontal_paned_handle.png"
		overlay_border = {0,0,0,0}
		overlay_stretch = FALSE
		orientation = HORIZONTAL
	}

	# The handle on vertical dividers
	image
	{
	  	function = HANDLE
		recolorable = TRUE
		file            = "menu/plain_background.png"
		border          = { 1, 1, 1, 1 }
		stretch         = TRUE
		overlay_file = "lines/vertical_paned_handle.png"
		overlay_border = {0,0,0,0}
		overlay_stretch = FALSE
		orientation = VERTICAL
	}


  }
}

class "Gtk*Paned" style "paned"

style "umbra-statusbar"
{
engine "pixmap"
{

	image
	{
		function	= RESIZE_GRIP
		recolorable	= TRUE
		detail		= "statusbar"
		overlay_file	= "/menubar/statusgrip.png"
		overlay_border	= { 0 , 0 , 0 , 0}
		overlay_stretch	= TRUE
	}
    }
}

style "list-header"
{
   #Comment out the ythickness setting below for thicker column headers.
   ythickness = 0
   GtkTreeView::odd_row_color = "#82d4ff"
   GtkTreeView::even_row_color = "#effbff"

   engine "pixmap" 
	{

	#This image is used to draw the headers of columns in list views when they are
	#not selected.
    	image
      		{
        		function        = BOX
			recolorable     = TRUE
			shadow          = OUT
			file            = "menu/list_header.png"
			border          = { 1,1,1,1 }
			stretch         = TRUE
      		}

	#This image is used to draw the column headers in list views when they are
	#clicked.
    	image
      		{
        		function        = BOX
			recolorable     = TRUE
			shadow          = IN
			file            = "menu/hi-light.png"
			border          = { 1,1,1,1 }
			stretch         = TRUE
      		}

	#Does this do anything?
	image
      		{
        		function        = BOX
			recolorable     = TRUE
			shadow	    = OUT
			state		    = PRELIGHT
			file            = "menu/hi-light.png"
			border          = { 1,1,1,1 }
			stretch         = TRUE
      		}
  	}
    	
}

widget_class "*List" style "list-header"
widget_class "*Tree*" style "list-header"
widget_class "GtkCList" style "list-header"


# widget styles
class "GtkWidget"      					style "umbra-default"
class "GtkRange"       					style "umbra-range"
class "GtkProgressBar" 					style "umbra-progressbar"
class "GtkTreeView" 					style "list-header" # Really fixes GtkProgressBar in TreeView mode
class "GtkScale"					style "umbra-scale"
class "GtkStatusbar"					style "umbra-statusbar"

widget_class "*MenuItem.*ProgressBar*" 			style "umbra-progressbar"


# tooltips stuff
widget_class "*.tooltips.*.GtkToggleButton" 		style "umbra-tasklist"
widget "gtk-tooltip*" 					style "umbra-tooltips"

# treeview stuff
widget_class "*.GtkTreeView.GtkButton" 			style "list-header"
widget_class "*.GtkCTree.GtkButton" 			style "list-header"
widget_class "*.GtkList.GtkButton" 			style "list-header"
widget_class "*.GtkCList.GtkButton" 			style "list-header"
widget_class "*.GtkFrame.GtkLabel" 			style "list-header"

# notebook stuff
#widget_class "*.GtkNotebook.*.GtkEventBox" 		style "umbra-notebook"
#widget_class "*.GtkNotebook.*.GtkViewport" 		style "umbra-notebook"

# these should really use base and text colors instead
#widget_class "*GtkCTree*" 				style "evolution-hack"
#widget_class "*GtkList*" 				style "evolution-hack"
#widget_class "*GtkCList*" 				style "evolution-hack"
#widget_class "*.ETree.*" 				style "evolution-hack"

widget "*.nautilus-extra-view-widget" 			style:highest "extra-view-widgets"

class "GtkSeparatorMenuItem"		style:highest "umbra-pixmap"

# Work around for http://bugzilla.gnome.org/show_bug.cgi?id=382646
# Note that the work around assumes that the combobox is _not_ in
# appears-as-list mode.
# Similar hack also in the menuitem style.
# This style does not affect GtkComboBoxEntry, it does have an effect
# on comboboxes in appears-as-list mode though.
style "umbra-text-is-fg-color-workaround"
{
	text[NORMAL]      = @fg_color
	text[PRELIGHT]    = @fg_color
	text[SELECTED]    = @selected_fg_color
	text[ACTIVE]      = @fg_color
	text[INSENSITIVE] = darker (@bg_color)
}
widget_class "*.<GtkComboBox>.<GtkCellView>"   		style "umbra-text-is-fg-color-workaround"

style "umbra-menuitem-text-is-fg-color-workaround"
{
	text[NORMAL]        = @fg_color
	text[PRELIGHT]      = @selected_fg_color
	text[SELECTED]      = @selected_fg_color
	text[ACTIVE]        = @fg_color
	text[INSENSITIVE]   = darker (@bg_color)
}

widget "*.gtk-combobox-popup-menu.*"   			style "umbra-menuitem-text-is-fg-color-workaround"

# Work around the usage of GtkLabel inside GtkListItems to display text.
# This breaks because the label is shown on a background that is based on the
# base color set.
style "umbra-fg-is-text-color-workaround"
{
	fg[NORMAL]      = @text_color
	fg[PRELIGHT]    = @text_color
	fg[ACTIVE]      = @selected_fg_color
	fg[SELECTED]    = @selected_fg_color
	fg[INSENSITIVE] = darker (@bg_color)
}

widget_class "*<GtkListItem>*" 				style "umbra-fg-is-text-color-workaround"

# The same problem also exists for GtkCList and GtkCTree
# Only match GtkCList and not the parent widgets, because that would also change the headers.

widget_class "*<GtkCList>" 				style "umbra-fg-is-text-color-workaround"
